{
  "version": 3,
  "sources": [
    "index.js"
  ],
  "names": [
    "Private",
    "PDF2IMG",
    "options",
    "quality",
    "format",
    "size",
    "density",
    "savedir",
    "undefined",
    "savename",
    "identify",
    "file_path",
    "argument",
    "image",
    "resolve",
    "reject",
    "error",
    "data",
    "writeImage",
    "stream",
    "output",
    "filename",
    "page",
    "resize",
    "write",
    "name",
    "basename",
    "statSync",
    "path",
    "pdf_path",
    "isValidPDF",
    "fileExists",
    "stdout",
    "extname",
    "get",
    "set",
    "sep",
    "mkdirsSync",
    "pages",
    "getPageCount",
    "message",
    "toImage",
    "split",
    "length",
    "iStream",
    "createReadStream",
    "file",
    "getFilePath",
    "existsSync",
    "property",
    "value",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "index.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "import Promise from \"bluebird\"\nimport gm from \"gm\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport props from \"./helper\"\n\nlet Private = props()\n\nclass PDF2IMG {\n    constructor(options) {\n        Private(this).quality = 100\n        Private(this).format = options.format || \"png\"\n        Private(this).size = options.size || 600\n        Private(this).density = options.density || 200\n        Private(this).savedir = options.savedir || undefined\n        Private(this).savename = options.savename || undefined\n        \n        /**\n         * GM command - identify\n         * @access private\n         * @param {String} file_path path to valid file\n         * @param {Mixed} argument gm identify argument\n         * @return {Promise} \n         */\n        Private(this).identify = (file_path, argument = undefined) => {\n            let image = gm(file_path)\n            \n            return new Promise((resolve, reject) => {\n                if(argument)\n                    image.identify(argument, (error, data) => {\n                        if(error)\n                            return reject(error)\n\n                        return resolve(data)\n                    })\n                else\n                    image.identify((error, data) => {\n                        if(error)\n                            return reject(error)\n\n                        return resolve(data)\n                    })  \n            })\n        }\n\n\n        /**\n         * GM command - write\n         * @access private\n         * @param {Stream} stream\n         * @param {String} output\n         * @param {String} filename\n         * @param {Integer} page\n         * @return {Promise} \n         */\n        Private(this).writeImage = (stream, output, filename, page) => {\n            return new Promise((resolve, reject) => {\n                gm(stream, filename)\n                    .density(Private(this).density, Private(this).density)\n                    .resize(Private(this).size)\n                    .quality(Private(this).quality)\n                    .write(output, (error) => {\n                        if(error)\n                            return reject(error)\n\n                        return resolve({\n                            name: path.basename(output),\n                            size: fs.statSync(output)['size'] / 1000.0,\n                            path: output,\n                            page\n                        })\n                  })\n            })\n        }\n\n    }\n\n    async convert(pdf_path, page = 1) {\n        this.isValidPDF(pdf_path)\n        this.fileExists(pdf_path)\n\n        let stdout = []\n        let output = path.basename(pdf_path, path.extname(path.basename(pdf_path)))\n\n        // Set output dir\n        if (this.get(\"savedir\"))\n            this.set(\"savedir\", this.get(\"savedir\") + path.sep)\n        else\n            this.set(\"savedir\", output + path.sep)\n        \n        fs.mkdirsSync(this.get(\"savedir\"))\n\n        if(!this.get(\"savename\"))\n            this.set(\"savename\", output)\n\n        let pages = await this.getPageCount(pdf_path)\n\n        if(page > pages)\n            throw {error: \"InvalidPageSelection\", message: \"Cannot convert non-existent page\"}\n        \n        return await this.toImage(pdf_path, page)\n    }\n\n    /**\n     * Get how many pages are there in the pdf file\n     * @param {String} pdf_path path to file\n     * @return {Integer} number of pages\n     */\n    async getPageCount(pdf_path) {\n        let page = await Private(this).identify(pdf_path, \"%p \")\n        page = page.split(\" \")\n        \n        return page.length\n    }\n\n    /**\n     * Converts pdf to image\n     * @param {String} pdf_path \n     * @param {Integer} page\n     * @return {Promise} \n     */\n    async toImage(pdf_path, page) {\n        let iStream  = fs.createReadStream(pdf_path)\n        let file     = `${this.get(\"savedir\")}${this.get(\"savename\")}_${page}.${this.get(\"format\")}`\n        let filename = this.getFilePath(iStream)\n\n        return await Private(this).writeImage(iStream, file, filename, page)\n    }\n\n    /**\n     * Get file path\n     * @param {Stream} stream\n     * @return {String} path\n     */\n    getFilePath(stream) {\n        if(!stream)\n            throw {error: \"InvalidPath\", message: \"Invalid Path\"}\n\n        return stream.path\n    }\n\n    /**\n     * Checks if the supplied file has the exact file format\n     * @param {String} pdf_path path to file\n     * @return {Mixed} file status\n     */\n    isValidPDF(pdf_path) {\n        if (path.extname(path.basename(pdf_path)) != '.pdf') \n            throw {error: \"InvalidPDF\", message: \"File supplied is not a valid PDF\"}\n        \n        return true\n    }\n\n    /**\n     * Checks if the supplied file has exists\n     * @param {String} pdf_path path to file\n     * @return {Mixed} file status\n     */\n    fileExists(pdf_path) {\n        if(!fs.existsSync(pdf_path))\n            throw {error: \"FileNotFound\", message: \"File supplied cannot be found\"}\n\n        return true\n    }\n\n    /**\n     * Get value from private property\n     * @param {String} property\n     * @return {Mixed} value of the property \n     */\n    get(property) {\n        return Private(this)[property]\n    }\n\n    /**\n     * Add/set value as private property\n     * @param {String} property \n     * @param {String} value\n     * @return {Object} this \n     */\n    set(property, value) {\n        Private(this)[property] = value\n\n        return this\n    }\n}\n\nmodule.exports = PDF2IMG"
  ]
}
